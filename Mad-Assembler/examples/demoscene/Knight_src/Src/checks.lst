mads 2.1.7 build 4 (3 Oct 23)
Source: D:\!Delphi\mads\examples\demoscene\Knight_src\Src\checks.asm
     1 				 icl "system.inc"
Source: D:\!Delphi\mads\examples\demoscene\Knight_src\Src\system.inc
     1
     2 = 00FF			OS_BANKSTD = $FF
     3 = 00E3			OS_BANK0   = $E3
     4 = 00E7			OS_BANK1   = $E7
     5 = 00EB			OS_BANK2   = $EB
     6 = 00EF			OS_BANK3   = $EF
     7
     8 = 00FE			BANKSTD = $FE
     9 = 00E2			BANK0   = $E2
    10 = 00E6			BANK1   = $E6
    11 = 00EA			BANK2   = $EA
    12 = 00EE			BANK3   = $EE
    13
    14 = E000			STD_CHARS_DEF_ADR = $E000
    15
    16 = 0340			IOCB0			= $0340
    17 = 0342			ICCOM			= IOCB0 + $02
    18 = 0344			ICBAL			= IOCB0 + $04
    19 = 0345			ICBAH			= IOCB0 + $05
    20 = 0348			ICBLL			= IOCB0 + $08
    21 = 0349			ICBLH			= IOCB0 + $09
    22 = 034A			ICAX1			= IOCB0 + $0A
    23 = 034B			ICAX2			= IOCB0 + $0B
    24
    25 = 03A0			iocb6 = 928
    26 = 0041			soundr = $41
    27 = 0042			critic = $42
    28 = 004D			atract = $4D
    29 = 0058			savmsc = 88
    30 = 006A			ramtop = $6A
    31 = 0200			dliv    = $200
    32 = 0230			sdslst	= $230
    33 = 0230			dlptrs  = $230
    34 = 022F			sdmctl	= $22F
    35 = 022F			dmactls = $22F ;559
    36 = 026F			gtiactls = $26F ;623
    37 = 02C0			colpm0s = 704
    38 = 02C1			colpm1s = 705
    39 = 02C2			colpm2s = 706
    40 = 02C3			colpm3s = 707
    41 = 02C4			colpf0s = 708
    42 = 02C5			colpf1s = 709
    43 = 02C6			colpf2s = 710
    44 = 02C7			colpf3s = 711
    45 = 02C8			colbaks = 712
    46 = 02E7			memlo   = $2E7
    47 = 02F3			chact   = $2F3
    48 = 02FC			kbcodes = 764
    49 = 009B			eol = 155
    50 = 00CB			adr0 = 203
    51 = 00CD			adr1 = 205
    52 = 00CF			scr = 207
    53 = 00CB			licz = 203
    54 = 00CC			byte0 = 204
    55 = 0055			crscol = 85
    56 = 0054			crsrow = 84
    57 = 005F			oldcol = 95
    58 = 005E			oldrow = 94
    59 = 00D4			adress = 212
    60 = 5000			music = $5000
    61 = 5496			replayer = $5496
    62 = E45C			setvblv = 58460
    63 = E462			exitvblv = 58466
    64 = 0012			rtclock = $12
    65
    66 = 000A			dosvec   =   $000A
    67 = 000C			dosini   =   $000C
    68 = 0010			pokmsk   =   $0010
    69 = 02E0			runad    =   $02E0
    70 = 02E2			initad   =   $02E2
    71 = 0222			vvblki   =   $0222
    72
    73 = 4000			bankMem    = $4000
    74 = 7FFF			bankMemEnd = $7FFF
    75
    76
    77 				; hardware registers
    78 				;
    79 				; GTIA
    80 				;
    81 = D000			hposp0  = $d000
    82 = D001			hposp1  = $d001
    83 = D002			hposp2  = $d002
    84 = D003			hposp3  = $d003
    85 = D004			hposm0  = $d004
    86 = D005			hposm1  = $d005
    87 = D006			hposm2  = $d006
    88 = D007			hposm3  = $d007
    89 = D008			sizep0  = $d008
    90 = D009			sizep1  = $d009
    91 = D00A			sizep2  = $d00a
    92 = D00B			sizep3  = $d00b
    93 = D00C			sizem   = $d00c
    94 = D00D			grafp0  = $d00d
    95 = D00E			grafp1  = $d00e
    96 = D00F			grafp2  = $d00f
    97 = D010			grafp3  = $d010
    98 = D011			grafm   = $d011
    99 = D012			colpm0  = $d012
   100 = D013			colpm1  = $d013
   101 = D014			colpm2  = $d014
   102 = D015			colpm3  = $d015
   103 = D016			colpf0  = $d016
   104 = D017			colpf1  = $d017
   105 = D018			colpf2  = $d018
   106 = D019			colpf3  = $d019
   107 = D01A			colbak  = $d01a
   108 = D01B			gtiactl = $d01b
   109 = D01C			vdelay  = $d01c
   110 = D01D			pmctl   = $d01d
   111 = D01D			gractl  = $d01d
   112 = D01E			hitclr  = $d01e
   113 = D01F			consol  = $d01f
   114 = D004			p0pf    = $d004
   115 = D010			trig0   = $d010
   116 = D011			trig1   = $d011
   117 = D012			trig2   = $d012
   118 = D013			trig3   = $d013
   119 = D014			pal     = $d014
   120 				;
   121 				; POKEY
   122 				;
   123 = D200			audf1   = $d200
   124 = D201			audc1   = $d201
   125 = D202			audf2   = $d202
   126 = D203			audc2   = $d203
   127 = D204			audf3   = $d204
   128 = D205			audc3   = $d205
   129 = D206			audf4   = $d206
   130 = D207			audc4   = $d207
   131 = D208			audctl  = $d208
   132 = D209			kbcode  = $d209
   133 = D209			stimer  = $d209
   134 = D20A			random  = $d20a
   135 = D20A			skrest  = $d20a
   136 = D20B			potgo   = $d20b
   137 = D20D			serout  = $d20d
   138 = D20E			irqen   = $d20e
   139 = D20E			irqst   = $d20e
   140 = D20F			skctl   = $d20f
   141 = D20F			skstat  = $d20f
   142 				;
   143 				; PIA
   144 				;
   145 = D300			porta   = $d300
   146 = D301			portb   = $d301
   147 = D302			pactl   = $d302
   148 = D303			pbctl   = $d303
   149 				;
   150 				; ANTIC
   151 				;
   152 = D400			dmactl  = $d400
   153 = D401			chrctl  = $d401
   154 = D402			dlptr   = $d402
   155 = D404			hscrol  = $d404
   156 = D405			vscrol  = $d405
   157 = D407			pmbase  = $d407
   158 = D409			chbase  = $d409
   159 = D40A			wsync   = $d40a
   160 = D40B			vcount  = $d40b
   161 = D40C			penh    = $d40c
   162 = D40D			penv    = $d40d
   163 = D40E			nmien   = $d40e
   164 = D40F			nmires  = $d40f
   165 = D40F			nmist   = $d40f
   166
   167 				;
   168 				; ROM VECTORS
   169 				;
   170 = E453			DSKINV   =   $E453
   171 = E456			CIOV     =   $E456
   172 = E459			SIOV     =   $E459
   173 = E45C			SETVBV   =   $E45C
   174 = E45F			SYSVBV   =   $E45F
   175 = E462			XITVBV   =   $E462
   176 = E465			SIOINV   =   $E465
   177 = E468			SENDEV   =   $E468
   178 = E46B			INTINV   =   $E46B
   179 = E46E			CIOINV   =   $E46E
   180 = E471			SELFSV   =   $E471
   181 = E474			WARMSV   =   $E474
   182 = E477			COLDSV   =   $E477
   183 = E47A			RBLOKV   =   $E47A
   184 = E47D			CSOPIV   =   $E47D
   185 = E480			PUPDIV   =   $E480
   186 = E483			SELFTSV  =   $E483
   187 = E486			PENTV    =   $E486
   188 = E489			PHUNLV   =   $E489
   189 = E48C			PHINIV   =   $E48C
   190 = E48F			GPDVV    =   $E48F
   191 				;
   192 				;interrupt vectors
   193 				;
   194 = FFFA			nmivec   =   $FFFA
   195 = FFFC			resetvec =   $FFFC
   196 = FFFE			irqvec   =   $FFFE
   197
   198
   199 = 0021			KEY_SPACE = $21
   200 = 001C			KEY_ESCAPE = $1C
   201 = 003F			KEY_A = $3F
   202 = 0015			KEY_B = $15
   203 = 0012			KEY_C = $12
   204 = 003A			KEY_D = $3A
   205 = 002A			KEY_E = $2A
   206 = 0038			KEY_F = $38
   207 = 003D			KEY_G = $3D
   208 = 0039			KEY_H = $39
   209 = 000D			KEY_I = $0D
   210 = 0001			KEY_J = $01
   211 = 0005			KEY_K = $05
   212 = 0000			KEY_L = $00
   213 = 0025			KEY_M = $25
   214 = 0023			KEY_N = $23
   215 = 0008			KEY_O = $08
   216 = 000A			KEY_P = $0A
   217 = 002F			KEY_Q = $2F
   218 = 0028			KEY_R = $28
   219 = 003E			KEY_S = $3E
   220 = 002D			KEY_T = $2D
   221 = 000B			KEY_U = $0B
   222 = 0010			KEY_V = $10
   223 = 002E			KEY_W = $2E
   224 = 0016			KEY_X = $16
   225 = 002B			KEY_Y = $2B
   226 = 0017			KEY_Z = $17
   227 = 001F			KEY_1 = $1F
   228 = 001E			KEY_2 = $1E
   229 = 001A			KEY_3 = $1A
   230 = 0018			KEY_4 = $18
   231 = 001D			KEY_5 = $1D
   232 = 001B			KEY_6 = $1B
   233 = 0033			KEY_7 = $33
   234 = 0035			KEY_8 = $35
   235 = 0030			KEY_9 = $30
   236 = 0032			KEY_0 = $32
   237 = 0020			KEY_COMMA = $20
   238 = 0022			KEY_DOT = $22
   239 = 00AA			KEY_CONTROL_E = $AA
   240 = 00A3			KEY_CONTROL_N = $A3
   241 = 00AF			KEY_CONTROL_Q = $AF
   242 = 00BE			KEY_CONTROL_S = $BE
   243 = 00AD			KEY_CONTROL_T = $AD
   244 = 00AE			KEY_CONTROL_W = $AE
     2 				 icl "demo.inc"
Source: D:\!Delphi\mads\examples\demoscene\Knight_src\Src\demo.inc
     1
     2 = 3500			startAdr            = $3500
     3 = 3800			tileMapLAdr         = $3800
     4 = 3C00			tileMapRAdr         = $3C00
     5 = 4000			picLAdr             = $4000
     6 = 6000			picRAdr             = $6000
     7 = 8000			scrollMemAdr		= $8000
     8 = 8030			dlAdr               = $8030
     9 = 8300			pmLAdr              = $8000+$0300
    10 = 8B00			pmRAdr              = $8800+$0300
    11
    12
    13
    14 = 0030			LEFT_BORDER = 48 ;horizontal sprite position equal to left border of screen
    15 = 002F			LEFT_BORDER_SH = 47 ;horizontal sprite position equal to left border of screen when line is shifted due to hsync delay
    16
    17
    18 = 0000			COLOR_BLACK = $00
    19 = 000E			COLOR_WHITE = $0E
    20 = 000A			COLOR_GREY1 = $0A
    21 = 0006			COLOR_GREY2 = $06 ;$08
    22 = 0004			COLOR_GREY3 = $04 ;$06 ;$04
    23 = 003A			COLOR_PINK = $3A
    24 = 00EC			COLOR_YELLOW = $EC ;$EE
    25 = 0028			COLOR_LBROWN = $28 ;$16 ;$18 ;$26
    26 = 00CA			COLOR_GREEN = $CA ;$C8 ;$BA
    27 = 00F4			COLOR_BROWN = $F4 ;$14 ;$F4 is more ore less equal on both PAL and NTSC
    28 = 0048			COLOR_PURPLE = $48 ;$4A
    29 = 0064			COLOR_BLUE = $64
    30 = 0036			COLOR_RED = $36
    31 = 0066			COLOR_LBLUE = $66 ;$68
     3
     4 				 org startAdr
     5
     6 				 ;The initial checks start here.
     7 				 ;This code is executed before loading main part of XEX into memory and stops loading in case any test fails.
     8
     9 FFFF> 3500-3609> 20 95 + 	jsr checkMem
    10 3503 F0 06			beq chk1
    11 3505 20 0C 35			jsr wait3Sec
    12 3508 4C 32 35			jmp quitDos
    13 350B			chk1
    14 350B 60				rts
    15
    16 350C			wait3Sec
    17 350C A2 96			ldx #150
    18 350E			wait3Sec1
    19 350E A5 14			lda rtclock+2
    20 3510			wait3Sec2
    21 3510 C5 14			cmp rtclock+2
    22 3512 F0 FC			beq wait3Sec2
    23 3514 CA				dex
    24 3515 D0 F7			bne wait3Sec1
    25 3517 60				rts
    26
    27 3518			outputText
    28 3518 48				pha
    29 3519 A9 00			lda #$00
    30 351B 8D 49 03			sta ICBLH ;$0349
    31 351E 68				pla
    32 351F			outputLongText
    33 351F 8C 44 03			sty ICBAL ;$0344
    34 3522 8E 45 03			stx ICBAH ;$0345
    35 3525 8D 48 03			sta ICBLL ;$0348
    36 3528 A2 00			ldx #$00
    37 352A A9 0B			lda #$0B
    38 352C 9D 42 03			sta ICCOM,x ;$0342,X
    39 352F 4C 56 E4			jmp ciov ;$E456
    40
    41 3532			quitDos
    42 3532 20 38 35			jsr closeIOChns
    43 3535 6C 0A 00			jmp (dosvec)
    44
    45 				;close all IOCBs except 0
    46 3538			closeIOChns
    47 3538 A2 00			ldx	#0
    48 353A F0 08			beq	closeIOChns2
    49 353C			closeIOChns1
    50 353C A9 0C			lda #$0C
    51 353E 9D 42 03			sta ICCOM,x ;$0342,X
    52 3541 20 56 E4			jsr CIOV ;$E456
    53 3544			closeIOChns2
    54 3544 8A				txa
    55 3545 18				clc
    56 3546 69 10			adc #$10
    57 3548 AA				tax
    58 3549 10 F1			bpl closeIOChns1
    59 354B 60				rts
    60
    61 354C			insufMem
    62 354C 49 6E 73 75 66 66 + 	dta c "Insufficient memory! Required 48K RAM", $9B
    63 3572			insufMemEnd
    64
    65 3572			remCart
    66 3572 52 65 6D 6F 76 65 + 	dta c "Remove cartridge. Turn off Basic.", $9B
    67 3594			remCartEnd
    68
    69 = 0026			insufMemLen = insufMemEnd - insufMem
    70 = 0022			remCartLen = remCartEnd - remCart
    71
    72 3594 00			memCheckCnt	dta 0 ;number of test try 0-1; basic absence is checked twice as DOS may restore Basic if we turn it off
    73
    74 3595			checkMem
    75 = BFFE			memTestAdr  = $BFFE ;cell within cartridge A/Basic
    76 = 9FFE			memTestAdrB = $9FFE ;cell within cartridge B
    77 3595 AD 94 35			lda memCheckCnt
    78 3598 D0 34			bne checkBas	;if it is a second try then check Basic only as DOS may have restored it after we turned it off
    79 					;check if RAM available for OS is at least 32K (ignore both cartridges at the moment)
    80 359A A5 6A			lda ramtop
    81 359C C9 80			cmp #$80	;check if 32K RAM available in OS (ignore both cartridges)
    82 359E 90 3E			bcc chkm2
    83 					;check presence of RAM or ROM within cartridge B area (does not detect absence of memory on emulators but is required by cardridge absence test on real machine)
    84 35A0 A0 00			ldy #$00
    85 35A2			chkm0
    86 35A2 AD FE 9F			lda memTestAdrB
    87 35A5 CD FE 9F			cmp memTestAdrB
    88 35A8 D0 34			bne chkm2
    89 35AA 88				dey
    90 35AB D0 F5			bne chkm0
    91 					;check absence of cartridge B
    92 35AD AD FE 9F			lda memTestAdrB
    93 35B0 EE FE 9F			inc memTestAdrB
    94 35B3 CD FE 9F			cmp memTestAdrB
    95 35B6 F0 2E			beq chkm3
    96 35B8 8D FE 9F			sta memTestAdrB
    97 					;check if RAM available for OS is at least 40K (ignore Basic at the moment)
    98 35BB A5 6A			lda ramtop
    99 					;cmp #$C0	;check if 48K RAM available in OS
   100 35BD C9 A0			cmp #$A0	;check if 40K RAM available in OS (ignore Basic)
   101 35BF 90 1D			bcc chkm2
   102 					;check presence of RAM or ROM within cartridge A area (does not detect absence of memory on emulators but is required by cardridge absence test on real machine)
   103 35C1 A0 00			ldy #$00
   104 35C3			chkm1
   105 35C3 AD FE BF			lda memTestAdr
   106 35C6 CD FE BF			cmp memTestAdr
   107 35C9 D0 13			bne chkm2
   108 35CB 88				dey
   109 35CC D0 F5			bne chkm1
   110 35CE			checkBas
   111 					;check absence of cartridge A/Basic
   112 35CE AD FE BF			lda memTestAdr
   113 35D1 EE FE BF			inc memTestAdr
   114 35D4 CD FE BF			cmp memTestAdr
   115 35D7 F0 19			beq chkm5	;cartridge A/Basic present
   116 35D9 8D FE BF			sta memTestAdr
   117 35DC D0 26			bne chkm6	;all tests ok
   118 35DE			chkm2
   119 					;show message "INSUFFICIENT MEMORY! REQUIRED 48K OF RAM"
   120 35DE A0 4C			ldy #.lo(insufMem)
   121 35E0 A2 35			ldx #.hi(insufMem)
   122 35E2 A9 26			lda #insufMemLen
   123 35E4 D0 06			bne chkm4	;branch always
   124 35E6			chkm3
   125 					;show message "REMOVE CARTRIDGE/TURN OFF BASIC"
   126 35E6 A0 72			ldy #.lo(remCart)
   127 35E8 A2 35			ldx #.hi(remCart)
   128 35EA A9 22			lda #remCartLen
   129 35EC			chkm4
   130 35EC 20 18 35			jsr outputText
   131 35EF A9 FF			lda #$FF	;memory tests not passed
   132 35F1 60				rts
   133 35F2			chkm5
   134 35F2 AD 94 35			lda memCheckCnt
   135 35F5 D0 EF			bne chkm3	;if it is a second try then cartridge A/Basic absence test fails
   136 					;turn off basic
   137 35F7 A9 3C			lda #$3C
   138 35F9 8D 03 D3			sta pbctl
   139 35FC AD 01 D3			lda portb
   140 35FF 09 02			ora #$02
   141 3601 8D 01 D3			sta portb
   142 3604			chkm6
   143 3604 EE 94 35			inc memCheckCnt
   144 3607 A9 00			lda #$00	;memory tests passed
   145 3609 60				rts
   146
   147 02E2-02E3> 00 35		 ini startAdr
   148 02E2-02E3> 00 35		 ini startAdr	;run tests twice to check if DOS does not restore Basic if we turn it off
   149
