mads 2.1.7 build 10 (19 Jan 24)
Source: D:\!Delphi\mads\examples\games\a-maze-master\maze.asm
     1 				; Maze
     2 				;
     3 				; Maze cell data; 4 bits per cell. 0 - no wall, 1 - wall
     4 				; 1 left
     5 				; 2 right
     6 				; 4 up
     7 				; 8 down
     8
     9 = 0014			jiffies = $14
    10 = 0058			sm_ptr	= $58		; Screen memory pointer
    11 = 006A			ramtop	= $6a
    12 = 02F4			ch		= $2f4		; Pointer to high byte of character set
    13 = 2400			chr		= $2400		; International character set
    14 = 022F			dmactl	= $22f		; DMA control
    15 = 0230			dl_ptr	= $230
    16 = D01D			gfxctl	= $d01d		; Graphics control
    17 = D407			pmbase	= $d407		; PMG base pointer
    18 = D000			p0_hpos = $d000		; Player 0 hor pos
    19 = D001			p1_hpos = $d001		; Player 1 hor pos
    20 = 02C0			p0_color= $2c0
    21 = 02C1			p1_color= $2c1
    22 = 026F			gprior	= $26f		; Graphics priority
    23 = 02C5			color_reg1	= $2c5
    24 = 02C6			color_reg2	= $2c6
    25 = D008			p0_size		= $d008
    26 = 00C4			p0_addr 		= $c4
    27 = 00C6			p1_addr			= $c6
    28
    29 				; Zero page variables
    30 						ORG $cb
    31 FFFF> 00CB-00D1> 00 00	position 		.word 0		; Screen Position, word, address to screen memory
    32 00CD 00			coord_x			.byte 0		; x coordinate of current cell, 0-39
    33 00CE 00			coord_y			.byte 0		; y coordinate, 0-23
    34 00CF 00			maze_ready		.byte 0		; is maze ready; 0 - false, otherwise true
    35 00D0 00			target_jiffies	.byte 0		; keeps track of target jiffies to wait for
    36 00D1 01			wall_mask		.byte %00000001		; convenience var to check walls
    37
    38 				.MACRO SETUP_WAIT
    39 					.IFDEF SLOW_DOWN
    40 					lda jiffies					; check jiffies counters
    41 					clc
    42 					sta target_jiffies
    43 					.ENDIF
    44 				.ENDM
    45
    46 				.MACRO DO_THE_WAIT
    47 				wait_loop
    48 					.IFDEF SLOW_DOWN
    49 					lda target_jiffies
    50 					sec
    51 					sbc jiffies
    52 					bpl wait_loop				; check if negative, as one might actually miss the
    53 												; target if checking for equality
    54 					.ENDIF
    55 				.ENDM
    56
    57 00D2				ORG $2000
    58
    59 2000				.LOCAL display_list
    60 2000-23B9> 70 70 70	:3	.byte $70
    61 2003 42				.byte $42					; ANTIC mode 2 + sm ptr
    62 2004 00 00		sm	.word 0			
    63 2006 02 02 02 02 02 02 + :23	.byte $02					; ANTIC mode 2
    64 201D 41 00 20			.byte $41, a(display_list)	; Jump to address and wait for VBL
    65 					.ENDL
    66
    67 = 2020				.DEF ALG_HUNT_AND_KILL		; maze_alg points to Hunt-and-Kill
    68 = 2020				.DEF SLOW_DOWN				; slow down the maze generation
    69
    70 2020				ICL "definitions"
Source: D:\!Delphi\mads\examples\games\a-maze-master\definitions.asm
     1 				; Definitions
     2
     3 				.IFNDEF DEFINITIONS
     4 				.DEF DEFINITIONS
     5
     6 				ICCOM 			= $0342
     7 				CIOV  			= $E456
     8 				ICBAL 			= $0344
     9 				ICBAH			= $0345
    10 				ICAX1 			= $034A
    11 				ICAX2 			= $034B
    12
    13 				wall_left  		= %0001
    14 				wall_right 		= %0010
    15 				wall_up			= %0100
    16 				wall_down		= %1000
    17 				walled_in		= wall_left + wall_right + wall_up + wall_down
    18 				no_walls		= 0
    19 				bytes_per_row	= 40
    20 				bytes_per_col	= 1
    21 				num_rows		= 24
    22 				num_cols		= 40
    23
    24 				.ENDIF
    71 					
    72 					; Maze carving
    73 2020				ICL "sparse_maze"
Source: D:\!Delphi\mads\examples\games\a-maze-master\sparse_maze.asm
     1 				.IFDEF MAZE_SPARSE
     2
     3 				.LOCAL maze_carving_alg
     4
     5 				.ENDL
     6
     7 				.ENDIF
    74
    75 					; Maze algorithms
    76 2020				ICL "hunt_and_kill"
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
     1 				;
     2 				; Hunt and kill maze algorithm
     3 				; https://github.com/jamis/csmazes
     4 				;
     5
     6 				.IFDEF ALG_HUNT_AND_KILL
     7
     8 2020			.LOCAL maze_alg
     9
    10 = D20A			rng		= $d20a		; Random number generator
    11
    12
    13 2020					ICL "definitions"
Source: D:\!Delphi\mads\examples\games\a-maze-master\definitions.asm
     1 				; Definitions
     2
     3 				.IFNDEF DEFINITIONS
     4 				.DEF DEFINITIONS
     5
     6 				ICCOM 			= $0342
     7 				CIOV  			= $E456
     8 				ICBAL 			= $0344
     9 				ICBAH			= $0345
    10 				ICAX1 			= $034A
    11 				ICAX2 			= $034B
    12
    13 				wall_left  		= %0001
    14 				wall_right 		= %0010
    15 				wall_up			= %0100
    16 				wall_down		= %1000
    17 				walled_in		= wall_left + wall_right + wall_up + wall_down
    18 				no_walls		= 0
    19 				bytes_per_row	= 40
    20 				bytes_per_col	= 1
    21 				num_rows		= 24
    22 				num_cols		= 40
    23
    24 				.ENDIF
    14 2020					ICL "general_utils"
Source: D:\!Delphi\mads\examples\games\a-maze-master\general_utils.asm
     1 				; modulo
     2 				; https://gist.github.com/hausdorff/5993556
     3 				;
     4 				.MACRO mod val1,val2
     5 					lda	:val1
     6 					sec
     7 					
     8 				loop
     9 					sbc :val2
    10 					bcs loop
    11 					adc :val2
    12 				.ENDM
    15 						OPT R+						; enable macro code optimization
    16
    17 				;
    18 				; Initialize maze algorithm
    19 				; - lookup tables
    20 				; - flags
    21 				; - random starting cell
    22 				;
    23 2020			.PROC init
    24 2020 20 8C 22			coord_utils.init_luts
    25
    26 2023 A9 00			lda #0								; Reset maze ready flag
    27 2025 85 CF			sta maze_ready
    28 						
    29 2027				mod rng, #num_rows					; Random starting point, y coord 
Macro: MOD [Source: D:\!Delphi\mads\examples\games\a-maze-master\general_utils.asm]
     1 2027 AD 0A D2			lda	RNG
     2 202A 38				sec
     4 202B			loop
     5 202B E9 18			sbc #NUM_ROWS
     6 202D B0 FC			bcs loop
     7 202F 69 18			adc #NUM_ROWS
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
    30 2031 85 CE			sta coord_y
    31 2033				mod rng, #num_cols
Macro: MOD [Source: D:\!Delphi\mads\examples\games\a-maze-master\general_utils.asm]
     1 2033 AD 0A D2			lda	RNG
     2 2036 38				sec
     4 2037			loop
     5 2037 E9 28			sbc #NUM_COLS
     6 2039 B0 FC			bcs loop
     7 203B 69 28			adc #NUM_COLS
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
    32 203D 85 CD			sta coord_x
    33
    34 203F 60				rts	
    35 				.ENDP
    36
    37 				;
    38 				; Takes one step of maze generation.
    39 				; Either continues from current cell, or scans
    40 				; for new cell to continue.
    41 				;
    42 2040			.PROC step
    43 2040				.ZPVAR wild_hunt .byte	; did we just hunt
    44
    45 2040 A9 00 85 80			mva #0 wild_hunt
    46 2044 20 8B 21			check_neighbours
    47 2047 8A				txa
    48 2048 D0 69			bne carve_new_cell
    49 					
    50 					; Start hunt from upper-left corner
    51 204A A9 01 85 80			mva #1 wild_hunt
    52 204E A9 00			lda #0
    53 2050 85 CD			sta coord_x
    54 2052 85 CE			sta coord_y
    55 2054				coord_utils.setup_position_from_y_coord position, coord_y
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_COORD [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 2054 A4 CE			ldy COORD_Y
     2 2056 B9 00 40 85 CB		mva coord_utils.row_lut_lo,y POSITION
     3 205B B9 00 41 85 CC		mva coord_utils.row_lut_hi,y POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
    56 2060 A0 00			ldy #0
    57 					
    58 2062			hunt
    59 2062 B1 CB			lda (position),y
    60 2064 C9 0F			cmp #walled_in
    61 2066 F0 27			beq empty_cell			; cell is empty, check neighbours
    62
    63 2068			next_cell
    64 2068 E6 CD			inc coord_x
    65 206A A4 CD			ldy coord_x
    66 206C C0 27			cpy #[num_cols - 1]
    67 206E D0 F2			bne hunt
    68 					
    69 2070 A4 CE			ldy coord_y
    70 2072 C0 17			cpy #[num_rows - 1]
    71 2074 F0 14			beq maze_done
    72 2076 E6 CE			inc coord_y
    73 2078 C8				iny
    74 2079				coord_utils.setup_position_from_y_register position
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_REGISTER [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 2079 B9 00 40 85 CB		mva coord_utils.row_lut_lo,y POSITION
     2 207E B9 00 41 85 CC		mva coord_utils.row_lut_hi,y POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
    75 2083 A0 00			ldy #0
    76 2085 84 CD			sty coord_x
    77 2087 4C 62 20			jmp hunt
    78
    79 208A			maze_done
    80 208A A9 01			lda #1
    81 208C 85 CF			sta maze_ready
    82 208E 60				rts
    83
    84 208F			empty_cell					; we're in empty cell, are there neighbours	
    85 208F 20 8B 21			check_neighbours		; now 0 bit means valid direction and 1 invalid
    86 2092 8A				txa
    87 2093 A4 CD			ldy coord_x
    88 2095 D0 02			bne check_right_border
    89 2097 09 01			ora #wall_left			; set bits in invalid directions
    90
    91 2099			check_right_border
    92 2099 C0 27			cpy #[num_cols - 1]
    93 209B D0 02			bne check_top_border
    94 209D 09 02			ora #wall_right
    95
    96 209F			check_top_border
    97 209F A4 CE			ldy coord_y
    98 20A1 D0 02			bne check_bottom_border
    99 20A3 09 04			ora #wall_up
   100
   101 20A5			check_bottom_border
   102 20A5 C0 17			cpy #[num_rows - 1]
   103 20A7 D0 02			bne is_suitable
   104 20A9 09 08			ora #wall_down
   105
   106 20AB			is_suitable
   107 20AB C9 0F			cmp #$F			; if no valid direction, try next cell
   108 20AD F0 B9			beq next_cell
   109
   110 20AF 20 FD 20			connect_to_existing_corridor
   111 20B2 60				rts	
   112
   113 20B3			carve_new_cell
   114 20B3 2D 0A D2			and rng					; bitwise and the neighbours status with rng
   115
   116 20B6 24 D1			bit wall_mask
   117 20B8 D0 13			bne left
   118 20BA 4A				lsr
   119 20BB 24 D1			bit wall_mask
   120 20BD D0 1A			bne right
   121 20BF 4A				lsr
   122 20C0 24 D1			bit wall_mask
   123 20C2 D0 21			bne up
   124 20C4 4A				lsr
   125 20C5 24 D1			bit wall_mask
   126 20C7 D0 28			bne down
   127 					
   128 20C9 8A				txa
   129 20CA 4C B3 20			jmp carve_new_cell		; that was bad random number ;), let's try again
   130
   131 20CD			left
   132 20CD A2 01			ldx #wall_left
   133 20CF 20 23 21			connect_cell
   134 20D2 A5 80			lda wild_hunt
   135 20D4 D0 26			bne done				; if we came here from hunt, don't update coords
   136 20D6 C6 CD			dec coord_x
   137 20D8 60				rts
   138 					
   139 20D9			right
   140 20D9 A2 02			ldx #wall_right
   141 20DB 20 23 21			connect_cell
   142 20DE A5 80			lda wild_hunt
   143 20E0 D0 1A			bne done
   144 20E2 E6 CD			inc coord_x
   145 20E4 60				rts
   146
   147 20E5			up
   148 20E5 A2 04			ldx #wall_up
   149 20E7 20 23 21			connect_cell
   150 20EA A5 80			lda wild_hunt
   151 20EC D0 0E			bne done
   152 20EE C6 CE			dec coord_y
   153 20F0 60				rts
   154 					
   155 20F1			down
   156 20F1 A2 08			ldx #wall_down
   157 20F3 20 23 21			connect_cell
   158 20F6 A5 80			lda wild_hunt
   159 20F8 D0 02			bne done
   160 20FA E6 CE			inc coord_y
   161 						
   162 20FC			done
   163 20FC 60				rts
   164 = 0080			WILD_HUNT
   164 				.ENDP
   165
   166 20FD			.PROC connect_to_existing_corridor
   167 20FD 24 D1			bit wall_mask
   168 20FF D0 06			bne check_right
   169 2101 A2 01			ldx #wall_left
   170 2103 20 23 21			connect_cell
   171 2106 60				rts
   172
   173 2107			check_right
   174 2107 4A				lsr
   175 2108 24 D1			bit wall_mask
   176 210A D0 06			bne check_up
   177 210C A2 02			ldx #wall_right
   178 210E 20 23 21			connect_cell
   179 2111 60				rts
   180
   181 2112			check_up
   182 2112 4A				lsr
   183 2113 24 D1			bit wall_mask
   184 2115 D0 06			bne check_down
   185 2117 A2 04			ldx #wall_up
   186 2119 20 23 21			connect_cell
   187 211C 60				rts
   188
   189 211D			check_down
   190 211D A2 08			ldx #wall_down
   191 211F 20 23 21			connect_cell
   192 2122 60				rts
   193
   194 				.ENDP
   195
   196 				;
   197 				; Removes walls between current cell and cell in direction in register x.
   198 				; Procedure assumes direction has already been checked to be valid.
   199 				;
   200 2123			.PROC connect_cell
   201 2123				coord_utils.setup_position_from_y_coord position, coord_y
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_COORD [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 2123 A4 CE			ldy COORD_Y
     2 2125 B9 00 40 85 CB		mva coord_utils.row_lut_lo,y POSITION
     3 212A B9 00 41 85 CC		mva coord_utils.row_lut_hi,y POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
   202 212F A4 CD			ldy coord_x
   203 2131 B1 CB			lda (position),y
   204 					
   205 2133			left
   206 2133 E0 01			cpx #wall_left
   207 2135 D0 0C			bne right
   208 2137 29 0E			and #[$F - wall_left]
   209 2139 91 CB			sta (position),y
   210 213B 88				dey
   211 213C B1 CB			lda (position),y
   212 213E 29 0D			and #[$F - wall_right]
   213 2140 91 CB			sta (position),y
   214 2142 60				rts
   215 					
   216 2143			right
   217 2143 E0 02			cpx #wall_right
   218 2145 D0 0C			bne up
   219 2147 29 0D			and #[$F - wall_right]
   220 2149 91 CB			sta (position),y
   221 214B C8				iny
   222 214C B1 CB			lda (position),y
   223 214E 29 0E			and #[$F - wall_left]
   224 2150 91 CB			sta (position),y
   225 2152 60				rts
   226 					
   227 2153			up
   228 2153 E0 04			cpx #wall_up
   229 2155 D0 1A			bne down
   230 2157 29 0B			and #[$F - wall_up]
   231 2159 91 CB			sta (position),y
   232 215B A4 CE			ldy coord_y
   233 215D 88				dey
   234 215E				coord_utils.setup_position_from_y_register position
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_REGISTER [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 215E B9 00 40 85 CB		mva coord_utils.row_lut_lo,y POSITION
     2 2163 B9 00 41 85 CC		mva coord_utils.row_lut_hi,y POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
   235 2168 A4 CD			ldy coord_x
   236 216A B1 CB			lda (position),y
   237 216C 29 07			and #[$F - wall_down]
   238 216E 91 CB			sta (position),y
   239 2170 60				rts	
   240
   241 2171			down
   242 2171 29 07			and #[$F - wall_down]
   243 2173 91 CB			sta (position),y
   244 2175 A4 CE			ldy coord_y
   245 2177 C8				iny
   246 2178				coord_utils.setup_position_from_y_register position
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_REGISTER [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 2178 B9 00 40 85 CB		mva coord_utils.row_lut_lo,y POSITION
     2 217D B9 00 41 85 CC		mva coord_utils.row_lut_hi,y POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
   247 2182 A4 CD			ldy coord_x
   248 2184 B1 CB			lda (position),y
   249 2186 29 0B			and #[$F - wall_up]
   250 2188 91 CB			sta (position),y
   251 218A 60				rts
   252 				.ENDP
   253
   254 				;
   255 				; Check neighbour cells of current cell (coord_x, coord_y).
   256 				; Status returned in x register low nybble.
   257 				; Bit 1 - free cell, bit 0 - occupied
   258 				; 
   259 218B			.PROC check_neighbours
   260 218B				.ZPVAR check_position .WORD
   261 					
   262 218B A2 00			ldx	#0					; x contains the neighbour bits, 1 - free, 0 - occupied
   263
   264 218D A5 CE			lda	coord_y
   265 218F F0 18			beq down				; if coord_y == 0, skip up
   266
   267 2191			up							; check up for neighbours
   268 2191 A8				tay
   269 2192 88				dey
   270 2193				coord_utils.setup_position_from_y_register check_position
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_REGISTER [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 2193 B9 00 40 85 81		mva coord_utils.row_lut_lo,y CHECK_POSITION
     2 2198 B9 00 41 85 82		mva coord_utils.row_lut_hi,y CHECK_POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
   271 219D A4 CD			ldy coord_x
   272 219F B1 81			lda (check_position),y
   273 21A1 C9 0F			cmp #walled_in
   274 21A3 D0 04			bne down				; if != F, cell is occupied already
   275 21A5 8A				txa
   276 21A6 09 04			ora #wall_up
   277 21A8 AA				tax
   278 					
   279 21A9			down
   280 21A9 A5 CE			lda coord_y
   281 21AB C9 17			cmp #[num_rows - 1]
   282 21AD F0 18			beq left
   283 21AF A8				tay
   284 21B0 C8				iny
   285 21B1				coord_utils.setup_position_from_y_register check_position
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_REGISTER [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 21B1 B9 00 40 85 81		mva coord_utils.row_lut_lo,y CHECK_POSITION
     2 21B6 B9 00 41 85 82		mva coord_utils.row_lut_hi,y CHECK_POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
   286 21BB A4 CD			ldy coord_x
   287 21BD B1 81			lda (check_position),y
   288 21BF C9 0F			cmp #walled_in
   289 21C1 D0 04			bne left
   290 21C3 8A				txa
   291 21C4 09 08			ora #wall_down
   292 21C6 AA				tax
   293 					
   294 21C7			left
   295 21C7 A4 CE			ldy coord_y
   296 21C9				coord_utils.setup_position_from_y_register check_position
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_REGISTER [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 21C9 B9 00 40 85 81		mva coord_utils.row_lut_lo,y CHECK_POSITION
     2 21CE B9 00 41 85 82		mva coord_utils.row_lut_hi,y CHECK_POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\hunt_and_kill.asm
   297 21D3 A5 CD			lda coord_x
   298 21D5 F0 0C			beq right
   299 21D7 A8				tay
   300 21D8 88				dey
   301 21D9 B1 81			lda (check_position),y
   302 21DB C9 0F			cmp #walled_in
   303 21DD D0 04			bne right
   304 21DF 8A				txa
   305 21E0 09 01			ora #wall_left
   306 21E2 AA				tax
   307 					
   308 21E3			right
   309 21E3 A5 CD			lda coord_x
   310 21E5 C9 27			cmp #[num_cols - 1]
   311 21E7 F0 0D			beq done
   312 21E9 A4 CD			ldy coord_x
   313 21EB C8				iny
   314 21EC B1 81			lda (check_position),y
   315 21EE C9 0F			cmp #walled_in
   316 21F0 D0 04			bne done
   317 21F2 8A				txa
   318 21F3 09 02			ora #wall_right
   319 21F5 AA				tax
   320 					
   321 21F6			done
   322 21F6 60				rts	
   323 = 0081			CHECK_POSITION
   323 				.ENDP
   324
   325 				.ENDL
   326
   327 				.ENDIF
    77 					
    78 					; Control schemes
    79 21F7				ICL "player_control"
Source: D:\!Delphi\mads\examples\games\a-maze-master\player_control.asm
     1 				;
     2 				; Player control routines
     3 				;
     4
     5 21F7			.LOCAL player_control
     6
     7 = 0278			joystick_0	= $278
     8
     9 = 0001			joystick_up		= %0001
    10 = 0002			joystick_down	= %0010
    11 = 0004			joystick_left	= %0100
    12 = 0008			joystick_right	= %1000
    13
    14 = 0030			min_x			= $30
    15 = 00D0			max_x			= $D0
    16 = 001E			min_y			= $1E
    17 = 00A0			max_y			= $A0
    18
    19 21F7			.PROC read_controls
    20 				;	coord_utils.map_from_screen_to_grid_coords
    21 					
    22 				;	lda #"*"
    23 				;	sta (position),y
    24
    25 21F7 20 FB 21			move_player
    26 					
    27 21FA 60				rts	
    28 				.ENDP
    29
    30 21FB			.PROC move_player
    31 21FB			up
    32 21FB A9 01			lda #joystick_up
    33 21FD 2C 78 02			bit joystick_0
    34 2200 D0 0D			bne down
    35 2202 A9 1E			lda #min_y
    36 2204 CD CC 22			cmp p0_y
    37 2207 F0 17			beq left
    38 2209 20 52 22			move_up
    39 220C 4C 20 22			jmp left
    40
    41 220F			down
    42 220F A9 02			lda #joystick_down
    43 2211 2C 78 02			bit joystick_0
    44 2214 D0 0A			bne left
    45 2216 A9 A0			lda #max_y
    46 2218 CD CC 22			cmp p0_y
    47 221B F0 03			beq left
    48 221D 20 69 22			move_down
    49 					
    50 2220			left
    51 2220 A9 04			lda #joystick_left
    52 2222 2C 78 02			bit joystick_0
    53 2225 D0 13			bne right
    54 2227 A9 30			lda #min_x
    55 2229 CD CB 22			cmp p0_x
    56 222C F0 23			beq done
    57 222E CE CB 22			dec p0_x
    58 2231 AD CB 22			lda p0_x
    59 2234 8D 00 D0			sta p0_hpos
    60 2237 4C 51 22			jmp done
    61
    62 223A			right
    63 223A A9 08			lda #joystick_right
    64 223C 2C 78 02			bit joystick_0
    65 223F D0 10			bne done
    66 2241 A9 D0			lda #max_x
    67 2243 CD CB 22			cmp p0_x
    68 2246 F0 09			beq done
    69 2248 EE CB 22			inc p0_x
    70 224B AD CB 22			lda p0_x
    71 224E 8D 00 D0			sta p0_hpos
    72
    73 2251			done
    74 2251 60				rts
    75 				.ENDP
    76
    77 2252			.PROC move_up
    78 2252 AD CC 22			lda p0_y
    79 2255 CE CC 22			dec p0_y
    80 2258 85 C4			sta p0_addr
    81 225A A2 08			ldx #8
    82 					
    83 225C			move_loop
    84 225C A0 01			ldy #1				; stupid logic, think again
    85 225E B1 C4			lda (p0_addr),y
    86 2260 88				dey
    87 2261 91 C4			sta (p0_addr),y
    88 2263 E6 C4			inc p0_addr
    89 2265 CA				dex
    90 2266 D0 F4			bne move_loop
    91
    92 2268			done
    93 2268 60				rts
    94 				.ENDP
    95
    96 2269			.PROC move_down
    97 2269 AD CC 22			lda p0_y
    98 226C C5 A0			cmp max_y
    99 226E F0 1B			beq done
   100 					
   101 2270 AD CC 22			lda p0_y
   102 2273 18				clc
   103 2274 69 08			adc #8
   104 2276 85 C4			sta p0_addr
   105 					
   106 2278			move_loop
   107 2278 A0 00			ldy #0
   108 227A C6 C4			dec p0_addr
   109 227C B1 C4			lda (p0_addr),y
   110 227E C8				iny
   111 227F 91 C4			sta (p0_addr),y
   112 2281 AD CC 22			lda p0_y
   113 2284 C5 C4			cmp p0_addr
   114 2286 D0 F0			bne move_loop
   115
   116 2288 EE CC 22			inc p0_y
   117 					
   118 228B			done	
   119 228B 60				rts
   120 				.ENDP
   121
   122 				.ENDL
    80
    81 					; General utility macros and procs
    82 228C				ICL "general_utils"
Source: D:\!Delphi\mads\examples\games\a-maze-master\general_utils.asm
     1 				; modulo
     2 				; https://gist.github.com/hausdorff/5993556
     3 				;
     4 				.MACRO mod val1,val2
     5 					lda	:val1
     6 					sec
     7 					
     8 				loop
     9 					sbc :val2
    10 					bcs loop
    11 					adc :val2
    12 				.ENDM
    83
    84 					; Coordinate mapping utilities
    85 228C				ICL "coord_utils"
Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm
     1 				;
     2 				; Coordinate utilities
     3 				;
     4 				; Map coordinates from screen coords (PMG hpos and scanline) to maze grid coords
     5 				; and vice versa.
     6
     7 228C			.LOCAL coord_utils
     8
     9 = 4000			row_lut_lo = $4000	; screen row lookup table, lo byte
    10 = 4100			row_lut_hi = $4100	; screen row lookup table, hi byte
    11
    12 				;
    13 				; Lookup tables constructed as in http://www.atariarchives.org/agagd/chapter8.php
    14 				;
    15 228C			.PROC init_luts
    16 228C A0 00			ldy #0						; lut offset
    17 228E A5 58			lda sm_ptr					; load screen memory lo byte
    18 2290 A6 59			ldx sm_ptr+1
    19
    20 2292			store_to_lut
    21 2292 99 00 40			sta row_lut_lo,y	; Store y coordinate lookup table lo byte
    22 2295 48				pha							; Push offset to stack
    23 2296 8A				txa							; X reg contains the hi byte
    24 2297 99 00 41			sta row_lut_hi,y
    25 229A 68				pla
    26
    27 229B C8				iny
    28 229C C0 18			cpy #num_rows				; Have we done all 24 rows already
    29 229E F0 09			beq lut_done
    30 22A0 18				clc
    31 22A1 69 28			adc #bytes_per_row			; Add row width with carry
    32 22A3 90 ED			bcc store_to_lut
    33 22A5 E8				inx							; Carry set, increase hi byte
    34 22A6 4C 92 22			jmp store_to_lut
    35
    36 22A9			lut_done
    37 22A9 60				rts
    38 				.ENDP
    39
    40 22AA			.PROC map_from_screen_to_grid_coords
    41 22AA AD CC 22			lda p0_y
    42 22AD 4A				lsr
    43 22AE 4A				lsr
    44 22AF A8				tay
    45 					
    46 22B0				setup_position_from_y_register position
Macro: COORD_UTILS.SETUP_POSITION_FROM_Y_REGISTER [Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm]
     1 22B0 B9 00 40 85 CB		mva coord_utils.row_lut_lo,y POSITION
     2 22B5 B9 00 41 85 CC		mva coord_utils.row_lut_hi,y POSITION+1
Source: D:\!Delphi\mads\examples\games\a-maze-master\coord_utils.asm
    47 					
    48 22BA AD CB 22			lda p0_x
    49 22BD 4A				lsr
    50 22BE 4A				lsr
    51 22BF A8				tay
    52 					
    53 22C0 60				rts
    54 				.ENDP
    55
    56 				;
    57 				; Setup p0_hpos and p0 bitmap so that it corresponds to grid
    58 				; coordinates from p0_x and p0_y
    59 				;
    60 22C1			.PROC set_screen_coords_from_grid_coords
    61 22C1 AC CC 22			ldy p0_y
    62
    63 				.ENDP
    64
    65 				;
    66 				; Setup screen memory pointer pos_ptr according to coordinate y
    67 				;
    68 				.MACRO setup_position_from_y_coord pos_ptr, y
    69 					ldy :y
    70 					mva coord_utils.row_lut_lo,y :pos_ptr
    71 					mva coord_utils.row_lut_hi,y :pos_ptr+1
    72 				.ENDM
    73
    74 				.MACRO setup_position_from_y_register pos_ptr
    75 					mva coord_utils.row_lut_lo,y :pos_ptr
    76 					mva coord_utils.row_lut_hi,y :pos_ptr+1
    77 				.ENDM
    78
    79 				.ENDL
    86
    87 = 0007			the_guy_height = 7
    88
    89 22C4			the_guy
    90 22C4 00				.byte %00000000
    91 22C5 38				.byte %00111000
    92 22C6 54				.byte %01010100
    93 22C7 7C				.byte %01111100
    94 22C8 44				.byte %01000100
    95 22C9 38				.byte %00111000
    96 22CA 00				.byte %00000000
    97
    98 				; Player grid coordinates
    99 22CB 01			p0_x	.byte 1
   100 22CC 01			p0_y 	.byte 1
   101 22CD 14			p1_x	.byte 20
   102 22CE 0C			p1_y	.byte 12
   103
   104 22CF			.PROC init
   105 22CF A9 30			lda #$30					; set PMG 2k memory are from $3000-$37ff 
   106 22D1 8D 07 D4			sta pmbase
   107 22D4 85 CC			sta position + 1
   108
   109 22D6 18				clc
   110 22D7 69 04			adc #4						; p0 data starts at pmbase + 1k
   111 22D9 85 C5			sta p0_addr + 1
   112
   113 22DB 69 01			adc #1						; p1 data starts at p1_addr + $100
   114 22DD 85 C7			sta p1_addr + 1
   115
   116 22DF A9 00			lda #0						; reset lo-bytes of addresses
   117 22E1 85 C4			sta p0_addr
   118 22E3 85 C6			sta p1_addr
   119 22E5 85 CB			sta position
   120
   121 22E7 20 08 23			setup_display_list
   122 					
   123 22EA A9 00			lda #0							; set black background color
   124 22EC 8D C6 02			sta color_reg2
   125 22EF A9 0F			lda #$f							; max luminance for foreground
   126 22F1 8D C5 02			sta color_reg1
   127
   128 22F4 A9 24 8D F4 02		mva #>chr ch					; set character set
   129
   130 22F9 20 27 23			init_and_enable_pmg
   131
   132 22FC 20 6C 23			setup_players
   133
   134 22FF 20 6C 23			clear_screen_memory
   135 					
   136 2302 20 20 20			maze_alg.init
   137 2305 4C 9F 23			jmp main
   138 				.ENDP
   139
   140 2308			.PROC setup_display_list
   141 2308 A9 00			lda #0			; disable ANTIC for display list update
   142 230A 8D 2F 02			sta dmactl
   143 					
   144 230D A5 58 8D 04 20 A5 + 	mwa sm_ptr display_list.sm
   145 					
   146 2317 A9 00 8D 30 02 A9 + 	mwa #display_list dl_ptr	; set display list address
   147
   148 2321 A9 22			lda #$22		; enable ANTIC again
   149 2323 8D 2F 02			sta dmactl
   150 2326 60				rts
   151 				.ENDP
   152
   153 2327			.PROC init_and_enable_pmg
   154 2327			enable_pmg
   155 					; PMG / http://www.hintermueller.de/dereatari-chapter-4
   156 2327 A9 3E			lda #[46 + 16]					; single line resolution
   157 2329 8D 2F 02			sta dmactl
   158
   159 					; clear pmg memory
   160 232C A0 00			ldy #0
   161 232E A9 00			lda #0
   162
   163 2330			clr_loop_pmg
   164 2330 91 C4			sta (p0_addr), y	
   165 2332 C8				iny
   166 2333 D0 FB			bne clr_loop_pmg
   167
   168 2335 A0 00			ldy #0
   169
   170 					; p0 lo byte sets y coordinate (includes borders)
   171 2337 AD CC 22			lda p0_y
   172 233A 85 C4			sta p0_addr
   173
   174 233C			p0_loop							; Copy... The Guy
   175 233C B9 C4 22			lda the_guy,y
   176 233F 91 C4			sta (p0_addr),y
   177 2341 C8				iny
   178 2342 C0 07			cpy #the_guy_height
   179 2344 D0 F6			bne p0_loop
   180
   181 2346 A9 01			lda #1						; set priority to players, playfield then background
   182 2348 8D 6F 02			sta gprior
   183
   184 234B A9 02			lda #2						; enable players
   185 234D 8D 1D D0			sta gfxctl
   186 2350 A9 BF			lda #$BF
   187 2352 8D C0 02			sta p0_color
   188
   189 2355			p1_init
   190 					; set p1
   191 2355 A0 00			ldy #0
   192 2357 AD CE 22			lda p1_y
   193 235A 85 C6			sta p1_addr
   194
   195 235C			p1_loop
   196 235C B9 C4 22			lda the_guy,y
   197 235F 91 C6			sta (p1_addr),y
   198 2361 C8				iny
   199 2362 C0 07			cpy #the_guy_height
   200 2364 D0 F6			bne p1_loop
   201
   202 2366 A9 48			lda #$48
   203 2368 8D C1 02			sta p1_color
   204
   205 236B 60				rts
   206 				.ENDP
   207
   208 236C			.PROC setup_players
   209 					
   210 				.ENDP
   211
   212 236C			.PROC clear_screen_memory
   213 					; Clear screen memory, 40*24 bytes = 3 pages and change
   214 236C A5 58 85 CB A5 59 + 	mwa sm_ptr position
   215 2374 A5 58 85 CD A5 59 + 	mwa sm_ptr position+2		; use zero page locations without worries at this point
   216 237C E6 CE			inc position+3				; as they are uninitialized anyway. I setup pointers
   217 237E A5 CD 85 CF A5 CE + 	mwa position+2 position+4	; to 3 consecutive pages for simpler clearing loop 
   218 2386 E6 D0			inc position+5
   219
   220 2388 A9 0F			lda #walled_in
   221 238A A0 00			ldy #0						; Offset
   222
   223 238C			clr_loop	
   224 238C 91 CB			sta (position),y
   225 238E 91 CD			sta (position+2),y
   226 2390 91 CF			sta (position+4),y
   227 2392 C8				iny
   228 2393 D0 F7			bne clr_loop
   229
   230 					; Still 192 bytes to go on the fourth page
   231 2395 A0 C0			ldy	#192
   232 2397 E6 D0			inc position+5				; increase hi byte for next page
   233
   234 2399			clr_loop2	
   235 2399 88				dey
   236 239A 91 CF			sta	(position+4),y
   237 239C D0 FB			bne clr_loop2
   238 239E 60				rts
   239 				.ENDP
   240
   241 239F			.PROC main
   242 239F			maze_loop
   243 239F 20 40 20			maze_alg.step				; run one step of algorithm
   244
   245 23A2 A9 00			lda #0
   246 23A4 C5 CF			cmp maze_ready				; is maze ready
   247 23A6 F0 F7			beq maze_loop
   248
   249 23A8			main_loop
   250 23A8				SETUP_WAIT
Macro: SETUP_WAIT [Source: D:\!Delphi\mads\examples\games\a-maze-master\maze.asm]
     2 23A8 A5 14			lda jiffies					; check jiffies counters
     3 23AA 18				clc
     4 23AB 85 D0			sta target_jiffies
Source: D:\!Delphi\mads\examples\games\a-maze-master\maze.asm
   251
   252 23AD 20 F7 21			player_control.read_controls
   253 					
   254 23B0				DO_THE_WAIT
Macro: DO_THE_WAIT [Source: D:\!Delphi\mads\examples\games\a-maze-master\maze.asm]
     1 23B0			wait_loop
     3 23B0 A5 D0			lda target_jiffies
     4 23B2 38				sec
     5 23B3 E5 14			sbc jiffies
     6 23B5 10 F9			bpl wait_loop				; check if negative, as one might actually miss the
Source: D:\!Delphi\mads\examples\games\a-maze-master\maze.asm
   255 					
   256 23B7 4C A8 23			jmp main_loop
   257 				.ENDP
   258
   259 					; Custom character set
   260 					ORG chr
   261 2400-27FF> 00 00 00 00 + 	INS "maze.chr"
   262 					
   263 02E0-02E1> CF 22			RUN init
